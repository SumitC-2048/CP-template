{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"boilerplate": {
		"prefix": "boilerplate",
		"body": [
			"#include<bits/stdc++.h>",
			"#define ll long long\n",
			"using namespace std;\n",
			"int main(){",
			"\t$1",
			"return 0;",
			"}"
		],
		"description": "This is Boilerplate code"
	},
	"comptitive programing": {
		"prefix": "comptitive programing",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;\n",
			"#define int long long int",
			"#define yy cout<<\"YES\"<<endl; return; ",
			"#define nn cout<<\"NO\"<<endl; return; ",
			"#define _init(b) memset(b,-1,sizeof(b))",
			"#define _init0(b) memset(b,0,sizeof(b))",
			"#define bpop(x) __builtin_popcount(x)",
			"#define inf 1e18+1",
			"#define smt ios_base::sync_with_stdio(false); cin.tie(0);cout.tie(0);",
			"#define debug(i) cout<<#i<<' '<<i<<endl;",
			"",
			"const int mod=1e9+7;\n",
			"void solve(){",
			"    $1",
			"}\n",
			"signed main(){",
			"\tsmt",
			"\tint t=1;",
			"\tcin>>t;",
			"\twhile(t--){",
			"\t\tsolve();",
			"\t}",
			"return 0;",
			"}"
		],
		"description": "This is code for CP"
	},
	"__lcm": {
		"prefix": "LCM",
		"body": [
			"int lcm(int a, int b){",
			"    int lcm = (a * b) / (__gcd(a, b));",
			"    return lcm;",
			"}"
		],
		"description": "This code snnipet is for finding lcm of two intergetrs"
	},
	"isprime": {
		"prefix": "ip",
		"body": [
			"bool IsPrime(int n){",
			"    if(n==1){return false;}",
			"    for (int i = 2; i <= n/i; i++)",
			"    {",
			"        if(n%i==0){",
			"            return false;",
			"        }",
			"    }",
			"    return true;",
			"}"
		],
		"description": "This code is a function for checking the number is prime or not"
	},
	"Seive": {
		"prefix": "sv",
		"body": [
			"int s[1000001];",
			"void seive(){",
			"    s[0]=s[1]=1;",
			"    for (int i = 2; i*i <= 1000001; i++)",
			"    {",
			"        if(!s[i]){",
			"            for (int j = i*i; j < 1000001; j+=i)",
			"            {",
			"                s[j]=1;",
			"            }",
			"        }",
			"    }",
			"}",

		],
		"description": "This code is a function for checking the number is prime or not"
	},
	"Binary Exponetiation": {
		"prefix": "binpow",
		"body": [
			"int binpow(int a, int b, int m) {",
			"    a %= m;",
			"    int res = 1;",
			"    while (b > 0) {",
			"        if (b & 1)",
			"            res = res * a % m;",
			"        a = a * a % m;",
			"        b >>= 1;",
			"    }",
			"    return res;",
			"}",			
		],
		"description": "Binary Exponetiation"
	},
	"Prime Factorization": {
		"prefix": "primesv",
		"body": [
			"int s[1000001];",
			"void seive(){",
			"    for (int i = 0; i < 1000001; i++)",
			"    {",
			"        s[i]=-1;",
			"    }",
			"    ",
			"    for (int i = 2; i*i <= 1000001; i++)",
			"    {",
			"        if(s[i]==-1){",
			"            for (int j = i*i; j < 1000001; j+=i)",
			"            {",
			"                if(s[j]==-1){",
			"                    s[j]=i;",
			"                }",
			"            }",
			"        }",
			"    }",
			"}",

		],
		"description": "prime factorization with seive"
	},
	"Print Binary": {
		"prefix": "PrintBinary",
		"body": [
			"void printBInary(int n){",
			"    for (int i = 0; i < log2(n)+2; i++)",
			"    {",
			"        cout<<((n>>i)&1);",
			"    }",
			"    cout<<endl;;",
			"}",
		],
		"description": "Prints the binary number"
	},
	"nc": {
		"prefix": "nc",
		"body": [
			"int nc(int n,int k){",
			"    int ans = fact[n];",
			"    int den = fact[k] * fact[n-k] % mod;",
			"    ans = (ans * binpow(den, mod-2, mod)) % mod;",
			"    return ans;",
			"}"
		],
		"description": "ncx"
	},
	"Disjoint set Union": {
		"prefix": "dsu",
		"body": [
			"class dsu{",
			"public:",
			"    vector<int>parent, sz;",
			"    dsu(int n){",
			"        parent.resize(n+1);",
			"        sz.resize(n+1);",
			"        for (int i = 0; i < n; i++)",
			"        {",
			"            make(i+1);",
			"        }",
			"    }",
			"",
			"    void make(int n){",
			"        parent[n] = n;",
			"        sz[n] = 1;",
			"    }",
			"",
			"    int find(int n){",
			"        if(parent[n]==n){return n;}",
			"        return parent[n] = find(parent[n]);",
			"    }",
			"",
			"    void Union(int a,int b){",
			"        a= find(a);",
			"        b= find(b);",
			"        if(a != b){",
			"            if(sz[a] < sz[b]){",
			"                swap(a,b);",
			"            }",
			"            parent[b] =a;",
			"            sz[a] += sz[b]; ",
			"            sz[b] = 0;",
			"        }",
			"    }",
			"};",
		],
		"description": "Dsu code from luv vedio - updated version with template"
	},
	"Math template": {
		"prefix": "math",
		"body": [
			"map<int,int>ap;",
			"void make(){",
			"    for (int i = 1; (i*(i+1))/2<=3000000; i++)",
			"    {",
			"        ap[(i*(i+1))/2]=i;",
			"    }",
			"}",
			"int sum(int n){",
			"    return (n*(n+1))/2;",
			"}",
			"",
			"int ssum(int n){",
			"    return ((n*(n+1)*(2*n+1))/6LL);",
			"}",
			"int upr(int n){",
			"    return ((ceil)((sqrtl(1LL+8*n)-1LL)/2.0));",
			"}",
			

		],
		"description": "series: 1,2,3,.. n \n sum: 1+2+ .. +n \n ssum: 1*1 + 2*2 + .. +n*n \n series 1 3 6 10 ... finds upr_bound of this by upr, \n for i.e. upr(7) = 4 "
	},
	"SGtree": {
		"prefix": "sgtree",
		"body": [
			"class SGtree{",
			"    public:",
			"    vector<int>seg;",
			"    SGtree(int n){",
			"        seg.resize(4*n);",
			"    }",
			"    SGtree(){}",
			"",
			"    void build(int ind, int low,int high,int a[]){",
			"        if(low==high){",
			"            seg[ind]=a[low];",
			"            return;",
			"        }",
			"        int mid = ((low+high)>>1);",
			"",
			"        build(2*ind+1,low,mid,a);",
			"        build(2*ind+2,mid+1,high,a);",
			"        seg[ind] = min(seg[2*ind+1],seg[2*ind+2]);",
			"    }",
			"",
			"    int query(int ind,int l,int h,int low,int high,int a[]){",
			"        // no overlap",
			"        if(h<low || l>high)return INT_MAX;",
			"        // complete overlap",
			"        if(low>=l && high<=h)return seg[ind];",
			"",
			"        // partial overlap",
			"        int mid=(low+high)/2;",
			"        int left= (query(2*ind+1,l,h,low,mid,a));",
			"        int right= (query(2*ind+2,l,h,mid+1,high,a)) ;",
			"        return min(left,right);",
			"    }",
			"",
			"    void update(int ind, int low,int high,int a[],int i,int val){",
			"        if(low==high){",
			"            seg[ind]=val;",
			"            a[i]=val;",
			"            return;",
			"        }",
			"        int mid= (low+high)/2;",
			"        if(i<=mid){update(2*ind+1,low,mid,a,i,val);}",
			"        else{update(2*ind+2,mid+1,high,a,i,val);}",
			"",
			"        int left = seg[2*ind+1];",
			"        int right = seg[2*ind+2];",
			"        seg[ind] = min(left,right);",
			"    }",
			"",
			"};",

			

		],
		"description": "Template class for segtree \nmethods: build, query, update"
	},
	"Shortest path": {
		"prefix": "shortest_path",
		"body": [
			"vector<int> shortest_path(vector<int>v[],int source,int n){",
			"    queue<int>q;",
			"    q.push(source);",
			"    q.push(-1);",
			"    vector<int>vis(n+1);",
			"    vis[source]=1;",
			"    vector<int>ans(n+1,-1);",
			"    int level=0;",
			"    while (!q.empty())",
			"    {",
			"        int node=q.front();",
			"        q.pop();",
			"        if(node==-1){",
			"            if(q.size()==0){break;}",
			"            else{q.push(-1);}",
			"            level++;",
			"            continue;",
			"        }",
			"        ans[node]=level;",
			"        for (auto &&i : v[node])",
			"        {",
			"            if(!vis[i]){",
			"                q.push(i);",
			"                vis[i]=1;",
			"            }",
			"        }",
			"    }",
			"    return ans;",
			"}",

		],
		"description": "give shortest path from source to all nodes in undirected graph"
	},
	"ModInt": {
		"prefix": "Mint",
		"body": [
			"class ModInt {",
			"    int value;",
			"    static const int MOD = 1e9 + 7; // modulus value, you can modify if needed",
			"",
			"public:",
			"    // Constructor that initializes with an integer",
			"    ModInt(int val) {",
			"        value = (val % MOD + MOD) % MOD; // Ensure it's within the range of [0, MOD)",
			"    }",
			"",
			"    // Default constructor initializes with 0",
			"    ModInt() {",
			"        value = 0;",
			"    }",
			"",
			"    // Overloaded addition operator to handle (a + b) % MOD",
			"    ModInt operator+(const ModInt& other) const {",
			"        return ModInt((value + other.value) % MOD);",
			"    }",
			"",
			"    // Overloaded assignment operator for addition with modulo",
			"    ModInt& operator+=(const ModInt& other) {",
			"        value = (value + other.value) % MOD;",
			"        return *this;",
			"    }",
			"",
			"    // Function to get the value",
			"    int getValue() const {",
			"        return value;",
			"    }",
			"};",


		],
		"description": "This class has operator overloading, that makes moduler computation easy "
	},
	"LCA Class template": {
		"prefix": "lca",
		"body": [
			"class LCA{",
			"    // 0 based indexing",
			"    int n, l;",
			"    vector<vector<int>> adj;",
			"    int timer;",
			"    vector<int> tin, tout;",
			"    vector<vector<int>> up;",
			"    ",
			"    void dfs(int v, int p)",
			"    {",
			"        tin[v] = ++timer;",
			"        up[v][0] = p;",
			"        for (int i = 1; i <= l; ++i)",
			"            up[v][i] = up[up[v][i-1]][i-1];",
			"",
			"        for (int u : adj[v]) {",
			"            if (u != p)",
			"                dfs(u, v);",
			"        }",
			"",
			"        tout[v] = ++timer;",
			"    }",
			"",
			"    void preprocess(int root) {",
			"        tin.resize(n);",
			"        tout.resize(n);",
			"        timer = 0;",
			"        l = ceil(log2(n));",
			"        up.assign(n, vector<int>(l + 1));",
			"        dfs(root, root);",
			"    }",
			"",
			"    public:",
			"    LCA(int n,vector<vector<int>>&v){",
			"        adj = v;",
			"        this->n = n;",
			"        preprocess(0);",
			"    }",
			"",
			"    bool is_ancestor(int u, int v)",
			"    {",
			"        return tin[u] <= tin[v] && tout[u] >= tout[v];",
			"    }",
			"",
			"    int lca(int u, int v)",
			"    {",
			"        if (is_ancestor(u, v))",
			"            return u;",
			"        if (is_ancestor(v, u))",
			"            return v;",
			"        for (int i = l; i >= 0; --i) {",
			"            if (!is_ancestor(up[u][i], v))",
			"                u = up[u][i];",
			"        }",
			"        return up[u][0];",
			"    }",
			"};",
		],
		"description":"This is lca's class template\nit has 0-based indexing\nyou use lca(x,y) gives lowest common ancestor of x and y(0-indexing)\nis_ancestor(x,y) returns true if x is ancestor of y"
	},
	"FenweekTree template": {
		"prefix": "bit",
		"body": [
			"// For more info: https://cp-algorithms.com/data_structures/fenwick.html#range-operations",
			"struct FenwickTree {",
			"    vector<int> bit;  // binary indexed tree",
			"    int n;",
			"",
			"    FenwickTree(int n) {",
			"        this->n = n;",
			"        bit.assign(n, 0);",
			"    }",
			"",
			"    FenwickTree(vector<int> const &a) : FenwickTree(a.size()) {",
			"        for (size_t i = 0; i < a.size(); i++)",
			"            add(i, a[i]);",
			"    }",
			"",
			"    int sum(int r) {",
			"        int ret = 0;",
			"        for (; r >= 0; r = (r & (r + 1)) - 1)",
			"            ret += bit[r];",
			"        return ret;",
			"    }",
			"",
			"    int sum(int l, int r) {",
			"        return sum(r) - sum(l - 1);",
			"    }",
			"",
			"    void add(int idx, int delta) {",
			"        for (; idx < n; idx = idx | (idx + 1))",
			"            bit[idx] += delta;",
			"    }",
			"};"
		],
		"description":"This is Fenweek Tree/BIT(binary indexed tree) template for sum queries.\n For more info like range_addtion and min queries visit cp-algorithms."
	},
	"modint": {
		"prefix": "modint",
		"body": [
			"class modint{",
			"    static int mod;",
			"    int binpow(int a, int b, int m) {",
			"        a %= m;",
			"        int res = 1;",
			"        while (b > 0) {",
			"            if (b & 1)",
			"                res = res * a % m;",
			"            a = a * a % m;",
			"            b >>= 1;",
			"        }",
			"        return res;",
			"    }",
			"    public: ",
			"        int val;",
			"        modint(int a){",
			"            val = a;",
			"        }",
			"        modint(){",
			"            cout << \"Default constructor\" << endl;",
			"        }",
			"        static void setMod(int a){",
			"            modint::mod = a;",
			"        }",
			"        modint operator+(const modint& Z){",
			"            int a = this->val, b = Z.val;",
			"            a %= mod, b %= mod;",
			"            modint res = (a + b) % mod;",
			"            return res;",
			"        }",
			"        modint operator-(const modint& Z){",
			"            int a = this->val, b = Z.val;",
			"            a %= mod, b %= mod;",
			"            modint res = (a - b + mod) % mod;",
			"            return res;",
			"        }",
			"        modint operator*(const modint& Z){",
			"            int a = this->val, b = Z.val;",
			"            a %= mod, b %= mod;",
			"            modint res = (a * b) % mod;",
			"            return res;",
			"        }",
			"        modint operator/(const modint& Z){",
			"            int a = this->val, b = Z.val;",
			"            a %= mod, b %= mod;",
			"            modint res = (a * binpow(b,mod-2,mod)) % mod;",
			"            return res;",
			"        }",
			"        friend ostream& operator<<(ostream& os,const modint& Z){",
			"            os << Z.val;",
			"            return os;",
			"        }",
			"};",
			"int modint::mod = 1e9 + 7;",
		],
		"description": "This is a modint class template for modular arithmetic operations.\nIt supports addition, subtraction, multiplication, and division with modular inverse.\nYou can set the modulus using setMod function."
	}

}